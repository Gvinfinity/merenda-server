openapi: 3.0.0
info:
  title: Merenda (server)
  description: |
    Servidor da aplicação de entrega da merenda escolar do IFPE - Campus Recife.

    [Acessar documentação Swagger UI](./swagger-ui.html)

    # Autenticação

    Para acessar os endpoints protegidos, é necessário autenticação.
    <SecurityDefinitions />

  version: 1.0.0
  contact:
    name: IFPE Open Source
    email: oi@ifpeopensource.com.br
    url: https://ifpeopensource.com.br
  license:
    name: MIT
    url: https://github.com/ifpeopensource/merenda-server/blob/55c2a2bf85f99681a9c7df568e1e2bedbaac8b74/LICENSE
  x-logo:
    url: "https://raw.githubusercontent.com/ifpeopensource/.github/ff4b9f3fe9da65872eb3d841d89a3b1009fa618f/assets/logotype_horizontal_light.svg"
    altText: IFPE Open Source

externalDocs:
  description: README no GitHub
  url: https://github.com/ifpeopensource/merenda-server#readme

servers:
  - url: http://localhost:3000
    description: Servidor de desenvolvimento

tags:
  # Operations
  - name: users
    x-displayName: Usuários
    description: Operações relacionadas aos usuários
  - name: students
    x-displayName: Estudantes
    description: Operações relacionadas aos estudantes
  - name: meal_sessions
    x-displayName: Sessões de Merenda
    description: Operações relacionadas às sessões de merenda

  # Models
  - name: roles
    x-displayName: Tipos de Usuário
    description: |
      Tipos de usuário na aplicação. Cada usuário possui permissões diferentes.
      <SchemaDefinition schemaRef="#/components/schemas/Role" />
  - name: user_data_model
    x-displayName: Usuário
    description: |
      Dados do usuário que são retornados pela API.
      <SchemaDefinition schemaRef="#/components/schemas/UserData" />
  - name: student_data_model
    x-displayName: Estudante
    description: |
      Dados do estudante que são retornados pela API.
      <SchemaDefinition schemaRef="#/components/schemas/StudentData" />
  - name: meal_session_data_model
    x-displayName: Sessão de Merenda
    description: |
      Dados da sessão de merenda que são retornados pela API.
      <SchemaDefinition schemaRef="#/components/schemas/MealSessionData" />

  # HTTP Errors
  - name: bad_request
    x-displayName: 400 Bad Request (Erro de validação)
    description: |
      Requisição inválida. Erro de validação dos dados enviados.

      > ⚠️ **Atenção**:
      >
      >O erro 400 pode ser retornado por outros motivos, dependendo do endpoint.
      <SchemaDefinition schemaRef="#/components/schemas/Erro de Validação" />
  - name: unauthorized
    x-displayName: 401 Unauthorized
    description: |
      Token de acesso não informado ou inválido.
      <SchemaDefinition schemaRef="#/components/schemas/UnauthorizedError" />
  - name: forbidden
    x-displayName: 403 Forbidden
    description: |
      Usuário não tem permissão para acessar o recurso.
      <SchemaDefinition schemaRef="#/components/schemas/ForbiddenError" />
  - name: not_found
    x-displayName: 404 Not Found
    description: |
      Recurso não encontrado.
      <SchemaDefinition schemaRef="#/components/schemas/NotFoundError" />
  - name: internal_server_error
    x-displayName: 500 Internal Server Error
    description: |
      Erro interno do servidor.
      <SchemaDefinition schemaRef="#/components/schemas/InternalServerError" />

x-tagGroups:
  - name: Operações
    tags:
      - users
      - students
      - meal_sessions

  - name: Models
    tags:
      - roles
      - user_data_model
      - student_data_model
      - meal_session_data_model

  - name: Erros HTTP
    tags:
      - bad_request
      - unauthorized
      - forbidden
      - not_found
      - internal_server_error

paths:
  # Users
  /users:
    post:
      operationId: Criar Usuário
      description: Cria um novo usuário.
      tags:
        - users
      security:
        - OAuth:
            - ADMIN
      requestBody:
        $ref: "#/components/requestBodies/UserData"

      responses:
        "201":
          $ref: "#/components/responses/UserData"

        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Erro de Validação"
                  - $ref: "#/components/schemas/Usuário Já Existe"

              examples:
                Erro de Validação de Dados:
                  value:
                    error:
                      message: 'Validation error: Password too weak! at "password"; Invalid email at "email"; Expected string, received number at "name"'
                      details:
                        issues:
                          - code: invalid_string
                            validation: regex
                            path: ["password"]
                            message: Password too weak!
                          - code: invalid_string
                            validation: email
                            path: ["email"]
                            message: Invalid email
                          - code: invalid_type
                            expected: string
                            received: number
                            path: ["name"]
                            message: Expected string, received number
                        name: ZodError

                Usuário Já Existe:
                  value:
                    error:
                      message: User already exists in database!

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{email}:
    get:
      operationId: Encontrar Usuário
      description: Retorna dados de um usuário pelo seu e-mail.
      tags:
        - users
      security:
        - OAuth:
            - ADMIN
      parameters:
        - $ref: "#/components/parameters/userEmail"

      responses:
        "200":
          $ref: "#/components/responses/UserData"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Atualiza dados de um usuário.
      operationId: Atualizar Usuário
      tags:
        - users
      security:
        - OAuth:
            - ADMIN
      parameters:
        - $ref: "#/components/parameters/userEmail"

      requestBody:
        $ref: "#/components/requestBodies/UserData"

      responses:
        "200":
          $ref: "#/components/responses/UserData"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Deleta usuário.
      operationId: Deletar Usuário
      tags:
        - users
      security:
        - OAuth:
            - ADMIN
      parameters:
        - $ref: "#/components/parameters/userEmail"

      responses:
        "204":
          $ref: "#/components/responses/NoContent"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  # Students
  /students:
    get:
      description: Retorna uma lista de estudantes.
      operationId: Listar Estudantes
      tags:
        - students
      security:
        - OAuth:
            - VERIFIER
      responses:
        "200":
          description: Lista de estudantes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudentData"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      description: Cria um novo estudante.
      operationId: Criar Estudante
      tags:
        - students
      security:
        - OAuth:
            - ADMIN
      requestBody:
        $ref: "#/components/requestBodies/StudentData"

      responses:
        "201":
          $ref: "#/components/responses/StudentData"

        "400":
          description: Requisição inválida
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Erro de Validação"
                  - $ref: "#/components/schemas/Estudante Já Existe"

              examples:
                Erro de Validação de Dados:
                  value:
                    error:
                      message: 'Validation error: Invalid email at "email"; Expected string, received number at "name"'
                      details:
                        issues:
                          - code: invalid_string
                            validation: email
                            path: ["email"]
                            message: Invalid email
                          - code: invalid_type
                            expected: string
                            received: number
                            path: ["name"]
                            message: Expected string, received number
                        name: ZodError

                Estudante Já Existe:
                  value:
                    error:
                      message: Student already exists in database!

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /students/{id}:
    get:
      description: Retorna dados de um estudante pela sua matrícula.
      operationId: Encontrar Estudante por Matrícula
      tags:
        - students
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/studentId"

      responses:
        "200":
          $ref: "#/components/responses/StudentData"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      description: Atualiza dados de um estudante.
      operationId: Atualizar Estudante
      tags:
        - students
      security:
        - OAuth:
            - ADMIN
      parameters:
        - $ref: "#/components/parameters/studentId"

      requestBody:
        description: Dados do estudante
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: E-mail do estudante
                name:
                  type: string
                  description: Nome do estudante
                picUrl:
                  type: string
                  format: uri

            example:
              email: example@discente.ifpe.edu.br
              name: John Doe
              picUrl: https://picsum.photos/200

      responses:
        "200":
          $ref: "#/components/responses/UserData"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      description: Deleta estudante.
      operationId: Deletar Estudante
      tags:
        - students
      security:
        - OAuth:
            - ADMIN
      parameters:
        - $ref: "#/components/parameters/studentId"

      responses:
        "204":
          $ref: "#/components/responses/NoContent"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /students/find-by-email:
    get:
      description: Retorna dados de um estudante pelo seu E-mail.
      operationId: Encontrar Estudante por E-mail
      tags:
        - students
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: true
          description: E-mail do estudante
          example: abcd@discente.ifpe.edu.br

      responses:
        "200":
          $ref: "#/components/responses/StudentData"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  # Meal Sessions
  /meal-sessions:
    post:
      description: Inicia uma nova sessão de merenda.
      operationId: Iniciar Sessão de Merenda
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      responses:
        "200":
          $ref: "#/components/responses/MealSessionData"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /meal-sessions/{id}:
    get:
      description: Retorna dados de uma sessão de merenda.
      operationId: Encontrar Sessão de Merenda por ID
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/mealSessionId"
      responses:
        "200":
          $ref: "#/components/responses/MealSessionData"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      description: Encerra uma sessão de merenda.
      operationId: Encerrar Sessão de Merenda
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/mealSessionId"

      responses:
        "200":
          $ref: "#/components/responses/MealSessionData"

        "400":
          description: Sessão já encerrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Mensagem de erro

              example:
                error:
                  message: Meal session finished!

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /meal-sessions/restart/{id}:
    patch:
      description: Reinicia uma sessão de merenda.
      operationId: Reiniciar Sessão de Merenda
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/mealSessionId"

      responses:
        "200":
          $ref: "#/components/responses/MealSessionData"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/NotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /meal-sessions/{id}/student/add:
    post:
      description: Adiciona um estudante a uma sessão de merenda.
      operationId: Adicionar Estudante à Sessão de Merenda
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/mealSessionId"

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                  format: studentId
                  pattern: ^\d{5}.{2,6}\d{4}$
                  description: Matrícula do estudante

            example:
              studentId: "20231H61RC1234"

      responses:
        "200":
          $ref: "#/components/responses/MealSessionData"

        "400":
          description: Estudante já está na sessão ou Erro de Validação
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Estudante já está na sessão
                    properties:
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                            description: Mensagem de erro
                  - $ref: "#/components/schemas/Erro de Validação"

              examples:
                Estudante já está na sessão:
                  value:
                    error:
                        message: Student already in meal session!
                Erro de validação de dados:
                  value:
                    error:
                      message: 'Validation error: Invalid Student Id Format! at \"studentId\"'
                      details:
                        issues:
                          - validation: regex
                            code: invalid_string
                            message: Invalid Student Id Format!
                            path: ["studentId"]
                        name: ZodError

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/MealSessionOrStudentNotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

  /meal-sessions/{id}/student/status:
    post:
      description: Verifica a situação do estudante na sessão de merenda.
      operationId: Verificar Status de Estudante em Sessão de Merenda
      tags:
        - meal_sessions
      security:
        - OAuth:
            - VERIFIER
      parameters:
        - $ref: "#/components/parameters/mealSessionId"

        - in: query
          name: studentId
          schema:
            type: string
            format: studentId
            pattern: ^\d{5}.{2,6}\d{4}$
          required: true
          description: Número de matrícula do estudante
          example: "20231H61RC1234"

      responses:
        "200":
          description: Status do estudante na sessão de merenda
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    description: Status do estudante na sessão de merenda

                  servedAt:
                    type: string
                    format: date-time
                    description: Data e hora em que o estudante foi servido
                    nullable: true

              examples:
                Merenda disponível para o estudante:
                  value:
                    available: true
                    servedAt: null

                Merenda indisponível para o estudante:
                  value:
                    available: false
                    servedAt: "2021-08-01T15:00:00.000Z"

        "400":
          $ref: "#/components/responses/BadRequestValidation"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

        "403":
          $ref: "#/components/responses/ForbiddenError"

        "404":
          $ref: "#/components/responses/MealSessionOrStudentNotFound"

        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    OAuth:
      description: |
        Para acessar certos endpoints, é necessário se autenticar com o OAuth2.0.

      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:3000/oauth/login
          scopes:
            "ADMIN": Permissões de administrador
            "VERIFIER": Permissões de verificador
            "USER": Permissões de usuário

  schemas:
    # Models
    StudentData:
      description: |
        Dados de um estudante.
      type: object
      properties:
        id:
          type: string
          format: studentId
          pattern: ^\d{5}.{2,6}\d{4}$
          description: Matrícula do estudante
        name:
          type: string
          description: Nome do estudante
        email:
          type: string
          format: email
          description: E-mail do estudante
        picUrl:
          type: string
          format: uri
          description: URL da foto do estudante
        createdAt:
          type: string
          format: date-time
          description: Data de criação do estudante
        updatedAt:
          type: string
          format: date-time
          description: Data de atualização do estudante

    UserData:
      description: |
        Dados de um Usuário.
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: ID do usuário
        name:
          type: string
          description: Nome do usuário
        email:
          type: string
          format: email
          description: E-mail do usuário
        studentId:
          type: string
          format: studentId
          pattern: ^\d{5}.{2,6}\d{4}$
          nullable: true
          description: Matrícula do estudante, caso o usuário seja um estudante
        role:
          $ref: "#/components/schemas/Role"
        createdAt:
          type: string
          format: date-time
          description: Data de criação do usuário
        updatedAt:
          type: string
          format: date-time
          description: Data de atualização do usuário

    MealSessionData:
      description: Dados da sessão
      type: object
      properties:
        id:
          type: string
          format: cuid
          description: ID da sessão
        startedAt:
          type: string
          format: date-time
          description: Data e hora de início da sessão
        finishedAt:
          type: string
          format: date-time
          description: Data e hora de fim da sessão

    Role:
      description: |
        Tipos de usuário na aplicação. Cada usuário possui permissões diferentes.
      type: string
      enum:
        - "VERIFIER"
        - "ADMIN"
        - "STUDENT"
      default: "VERIFIER"

    # Errors
    Tipo de Dado Inválido:
      type: object
      properties:
        code:
          type: string
          enum: [invalid_type]
        expected:
          type: string
          description: Tipo esperado
        received:
          type: string
          description: Tipo recebido
        path:
          type: array
          description: Campos com erro
          items:
            type: string
        message:
          description: Mensagem de erro do Zod
          type: string

    Valor Inválido:
      type: object
      properties:
        code:
          type: string
          description: Código do erro
          example: invalid_string
        path:
          type: array
          description: Campos com erro
          items:
            type: string
        validation:
          type: string
          description: Validação que falhou
          example:
            - regex
            - email
        message:
          description: Mensagem de erro do Zod
          type: string

    # HTTP Response Errors
    # 400
    Erro de Validação:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
            details:
              type: object
              description: Detalhes do erro
              properties:
                issues:
                  type: array
                  description: Lista de erros
                  items:
                    anyOf:
                      - $ref: "#/components/schemas/Tipo de Dado Inválido"
                      - $ref: "#/components/schemas/Valor Inválido"
                name:
                  type: string
                  enum: [ZodError]
      example:
        error:
          message: 'Validation error: Invalid email at "email"; Expected string, received number at "name"'
          details:
            issues:
              - code: invalid_string
                validation: email
                path: ["email"]
                message: Invalid email
              - code: invalid_type
                expected: string
                received: number
                path: ["name"]
                message: Expected string, received number
            name: ZodError

    Usuário Já Existe:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum: [User already exists in database!]

    Estudante Já Existe:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum: [Student already exists in database!]

    #401
    UnauthorizedError:
      description: Token de acesso não informado ou inválido.
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum:
                - Missing authorization header
                - Invalid token
      example:
        error:
          message: Missing authorization header

    # 403
    ForbiddenError:
      description: Usuário não tem permissão para acessar o recurso.
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum:
                - Forbidden
              default: Forbidden
      example:
        error:
          message: Forbidden

    # 404
    NotFoundError:
      description: Recurso não encontrado.
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum:
                - Not Found
              default: Not Found
      example:
        error:
          message: Not Found

    # 500
    InternalServerError:
      description: Erro interno do servidor.
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Mensagem de erro
              enum:
                - Internal Server Error
              default: Internal Server Error
      example:
        error:
          message: Internal Server Error

  parameters:
    userEmail:
      name: email
      description: E-mail do usuário
      required: true
      in: path
      schema:
        type: string
        format: email
      example: example@ifpeopensource.com.br

    studentId:
      name: id
      description: Matrícula do estudante
      in: path
      schema:
        type: string
        format: studentId
        pattern: ^\d{5}.{2,6}\d{4}$
      required: true
      example: "20231H61RC1234"

    mealSessionId:
      name: id
      description: ID da sessão de merenda
      in: path
      schema:
        type: string
        format: cuid
      required: true
      example: "ckq7x0j0a0000j6s9j2j7q7x7"

  requestBodies:
    UserData:
      description: Dados do usuário
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: E-mail do usuário
              name:
                type: string
                description: Nome do usuário
              password:
                type: string
                format: password
                pattern: "^(?=.*[0-9])(?=.*[-?/|{}=!@#$%^&*]).{8,32}$"
                description: |
                  Senha do usuário.

                  Precisa ter entre 8 e 32 caracteres, pelo menos uma letra, um número e um caractere especial.
              role:
                $ref: "#/components/schemas/Role"

          example:
            email: example@ifpeopensource.com.br
            name: John Doe
            password: str&ngPass1
            role: ADMIN

    StudentData:
      description: Dados do estudante
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: studentId
                pattern: ^\d{5}.{2,6}\d{4}$
                description: Matrícula do estudante
              email:
                type: string
                format: email
                description: E-mail do estudante
              name:
                type: string
                description: Nome do estudante
              picUrl:
                type: string
                format: uri
                description: URL da foto do estudante

          example:
            id: 20231H61RC1234
            email: example@discente.ifpe.edu.br
            name: John Doe
            picUrl: https://picsum.photos/200

  responses:
    # Success Responses (2xx)
    UserData:
      description: Dados do usuário
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                format: cuid
                description: ID do usuário
              name:
                type: string
                description: Nome do usuário
              email:
                type: string
                format: email
                description: E-mail do usuário
              studentId:
                type: string
                format: studentId
                pattern: ^\d{5}.{2,6}\d{4}$
                nullable: true
                description: Matrícula do estudante, caso o usuário seja um estudante
              role:
                $ref: "#/components/schemas/Role"
              createdAt:
                type: string
                format: date-time
                description: Data de criação do usuário
              updatedAt:
                type: string
                format: date-time
                description: Data de atualização do usuário

          example:
            id: "cleaqjsco000asfvno6ibo33r"
            name: John Doe
            email: example@ifpeopensource.com.br
            studentId: null
            role: ADMIN
            createdAt: 2023-02-19T21:08:59.271Z
            updatedAt: 2023-02-19T21:08:59.271Z

    StudentData:
      description: Dados do estudante
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StudentData"

          example:
            id: "20231H61RC1234"
            name: John Doe
            email: example@ifpeopensource.com.br
            picUrl: https://picsum.photos/200
            createdAt: 2023-02-19T21:08:59.271Z
            updatedAt: 2023-02-19T21:08:59.271Z

    MealSessionData:
      description: Dados da sessão de merenda
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MealSessionData"

          example:
            id: cjjj9q7x0000k0a6e3q7x0z0z
            startedAt: 2020-12-01T12:00:00.000Z
            finishedAt: null

    NoContent:
      description: Sucesso. Sem conteúdo.

    # Error Responses - Client Errors (4xx)
    ## 400
    BadRequestValidation:
      description: Requisição inválida. Erro de validação.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Erro de Validação"

          examples:
            Erro de Validação de Dados:
              value:
                error:
                  message: 'Validation error: Invalid email at "email"; Expected string, received number at "name"'
                  details:
                    issues:
                      - code: invalid_string
                        validation: email
                        path: ["email"]
                        message: Invalid email
                      - code: invalid_type
                        expected: string
                        received: number
                        path: ["name"]
                        message: Expected string, received number
                    name: ZodError

    ## 401
    UnauthorizedError:
      description: Token de acesso não informado ou inválido.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnauthorizedError"
          examples:
            Token não informado:
              value:
                error:
                  message: Missing authorization header
            Token inválido:
              value:
                error:
                  message: Invalid access token

    ## 403
    ForbiddenError:
      description: Acesso negado. O usuário não tem permissão para realizar esta ação.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ForbiddenError"
          example:
            error:
              message: Forbidden

    ## 404
    NotFound:
      description: Não econtrado
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"
          example:
            error:
              message: Not Found

    MealSessionOrStudentNotFound:
      description: Sessão de merenda ou Estudante não encontrados
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensagem de erro
                  details:
                    type: string
                    description: Código do Erro

          examples:
            Meal session not found:
              value:
                error:
                    message: Meal Session not found!
                    details: meal_session_not_found

            Student not found:
              value:
                error:
                    message: Student not found!
                    details: student_not_found

    # Error Responses - Server Errors (5xx)
    ## 500
    InternalServerError:
      description: Erro interno do servidor
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InternalServerError"
          example:
            error:
              message: Internal Server Error
